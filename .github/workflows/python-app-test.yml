# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application test

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Cache Docker
      uses: actions/cache@v3
      with:
        path: ~/.cache/docker
        key: ${{ runner.os }}-docker-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: create .env
      run: |
        cat << EOF > .env
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_USER=${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
        MYSQL_HOST=${{ secrets.MYSQL_HOST }}
        EOF

    - name: create .env.backend
      run: |
        cat << EOF > .env.backend
        APP_ADMIN_USER=${{ secrets.APP_ADMIN_USER }}
        APP_ADMIN_PASSWORD=${{ secrets.APP_ADMIN_PASSWORD }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=${{ secrets.ALGORITHM }}
        PEPPER=${{ secrets.PEPPER }}
        ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        REFRESH_TOKEN_EXPIRE_WEEKS=${{ secrets.REFRESH_TOKEN_EXPIRE_WEEKS }}
        ENV=${{ secrets.ENV }}
        LOGFILE_PATH=${{ secrets.LOGFILE_PATH }}
        DEV_LOGFILE_PATH=${{ secrets.DEV_LOGFILE_PATH }}
        TEST_MYSQL_DATABASE=${{ secrets.TEST_MYSQL_DATABASE }}
        TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        BACKEND_PORT=${{ secrets.BACKEND_PORT }}
        EOF


    - name: create .env.db
      run: |
        cat << EOF > .env.db
        DOCKER_PLATFORM=${{ secrets.DOCKER_PLATFORM }}
        DB_PORT=${{ secrets.DB_PORT }}
        EOF

    - name: create .env.frontend
      run: |
        cat << EOF > .env.frontend
        VUE_APP_BACKEND_URL=${{ secrets.VUE_APP_BACKEND_URL }}
        FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}
        EOF
        
    - name: Start Docker
      run: |
        docker compose up -d --build

    - name: Check if backend is up
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8000/health; then
            echo "Backend is up!"
            exit 0
          fi
          sleep 5
        done
        echo "Backend failed to start within 150 seconds."
        exit 1
    
    - name: Create results directory
      run: mkdir -p results
    
    - name: Test with pytest
      run: |
        docker compose exec -T backend python -m pytest -vv --junitxml=results/test-results.xml
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: results/test-results.xml
        
    - name: Docker logs
      if: ${{ failure() }}
      run: docker compose logs

